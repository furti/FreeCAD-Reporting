# SQL Subset Grammar

grammar sql

    Statement <- `Select` __ Columns __
        FromClause
        WhereClause?
        GroupByClause?
        Semicolon? %make_statement

    # Clauses Start
    FromClause <- `From` __ Reference %prepare_from_clause

    WhereClause <- __ `Where` __ BooleanExpression %prepare_where_clause

    GroupByClause <- __ `Group By` __ (GroupByOperand (_ "," _ GroupByOperand)* ) %prepare_group_by_clause

    Columns <- (Column (_ "," _ Column)*) %prepare_columns

    Column <- (Asterisk / MultiParamFunction / Function / Operand) AsClause? %make_column

    GroupByOperand <- MultiParamFunction / Function / Operand

    AsClause <- __ `As` __ Literal %prepare_as_clause
    
    # Clauses End

    # Boolean Start
    BooleanExpression <- BooleanComparison __ BooleanOperator __ BooleanExpression %make_simple_boolean_expression
        / BooleanComparison
        / "(" _ BooleanExpression _ ")" (__ BooleanOperator __ BooleanExpression)* %make_complex_boolean_expression
    
    BooleanComparison <- Operand _ ComparisonOperator _ Operand %make_boolean_comparison

    BooleanOperator <- `And` %make_boolean_operator_and 
        / `Or` %make_boolean_operator_or

    ComparisonOperator <- ">=" %make_comp_operator_gte
        / "<=" %make_comp_operator_lte
        / "!=" %make_comp_operator_neq
        / "=" %make_comp_operator_eq
        / ">" %make_comp_operator_gt
        / "<" %make_comp_operator_lt
        / `IS NOT` %make_comp_operator_is_not
        / `IS` %make_comp_operator_is
        / `LIKE` %make_comp_operator_like

    # Boolean End

    # Functions
    
    Function <- FunctionName _ "(" _ (Asterisk / Operand) _ ")" %make_calculation

    FunctionName <- `Sum` %make_sum_operator 
        / `Count` %make_count_operator 
        / `Min` %make_min_operator 
        / `Max` %make_max_operator
        / `Type` %make_type_operator

    MultiParamFunction <- MultiParamFunctionName _ "(" _ (Asterisk / Operand) 
                          (_ "," _ (Asterisk / Operand))* ")" %make_multiparam_calculation

    MultiParamFunctionName <- `Concat` %make_concat_operator

    # Functions End

    # Arithmetic
    ArithmeticOperand <- Number / Reference

    ArithmeticOperation <- ArithmeticOperand __ ArithmeticOperator __ ArithmeticOperand %make_arithmetic_operation

    ArithmeticOperator <- '*' %make_multiply_arithmetic_operator
        / '/' %make_divide_arithmetic_operator
        / '+' %make_add_arithmetic_operator
        / '-' %make_subtract_arithmetic_operator

    # Arithmetic End

    # Basics
    Operand <- ArithmeticOperation / Null / Literal / ArithmeticOperand

    Reference <- [a-zA-Z0-9\.]+ %make_reference

    Literal <- "'" (!"'" .)* "'" %make_literal

    Number <- [0-9]+ %make_number

    Asterisk <- "*" %make_asterisk
    
    Semicolon <- _ ";"

    Null <- `Null` %make_null

    # optional whitespace
    _ <- [ \t\r\n]*

    # mandatory whitespace
    __ <- [ \t\r\n]+

    # End Basics